// Code generated by op-codegen - DO NOT EDIT MANUALLY

import { InvokeConfig, InnerClient, SharedCore } from "./core.js";
import { SdkIterable } from "./iterator.js";
import {
  FileAttachParams,
  FileAttributes,
  Item,
  ReviverFunc,
} from "./types.js";

export interface ItemsFilesApi {
  /**
   * Attach files to Items
   */
  attach(item: Item, fileParams: FileAttachParams): Promise<Item>;

  /**
   * Read file content from the Item
   */
  read(
    vaultId: string,
    itemId: string,
    attr: FileAttributes,
  ): Promise<Uint8Array>;

  /**
   * Delete files from Item
   */
  delete(item: Item, fileId: string): Promise<Item>;
}

export class ItemsFiles implements ItemsFilesApi {
  #inner: InnerClient;

  public constructor(inner: InnerClient) {
    this.#inner = inner;
  }

  /**
   * Attach files to Items
   */
  public async attach(item: Item, fileParams: FileAttachParams): Promise<Item> {
    const invocationConfig: InvokeConfig = {
      invocation: {
        clientId: this.#inner.id,
        parameters: {
          name: "ItemsFilesAttach",
          parameters: {
            item,
            file_params: fileParams,
          },
        },
      },
    };
    return JSON.parse(
      await this.#inner.core.invoke(invocationConfig),
      ReviverFunc,
    ) as Promise<Item>;
  }

  /**
   * Read file content from the Item
   */
  public async read(
    vaultId: string,
    itemId: string,
    attr: FileAttributes,
  ): Promise<Uint8Array> {
    const invocationConfig: InvokeConfig = {
      invocation: {
        clientId: this.#inner.id,
        parameters: {
          name: "ItemsFilesRead",
          parameters: {
            vault_id: vaultId,
            item_id: itemId,
            attr,
          },
        },
      },
    };
    return JSON.parse(
      await this.#inner.core.invoke(invocationConfig),
      ReviverFunc,
    ) as Promise<Uint8Array>;
  }

  /**
   * Delete files from Item
   */
  public async delete(item: Item, fileId: string): Promise<Item> {
    const invocationConfig: InvokeConfig = {
      invocation: {
        clientId: this.#inner.id,
        parameters: {
          name: "ItemsFilesDelete",
          parameters: {
            item,
            file_id: fileId,
          },
        },
      },
    };
    return JSON.parse(
      await this.#inner.core.invoke(invocationConfig),
      ReviverFunc,
    ) as Promise<Item>;
  }
}
