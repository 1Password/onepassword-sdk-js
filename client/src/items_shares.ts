// Code generated by op-codegen - DO NOT EDIT MANUALLY

import { InvokeConfig, InnerClient, SharedCore } from "./core.js";
import { SdkIterable } from "./iterator.js";
import {
  Item,
  ItemShareAccountPolicy,
  ItemShareParams,
  ValidRecipient,
  ReviverFunc,
} from "./types.js";

export interface ItemsSharesApi {
  /**
   * Get the item sharing policy of your account.
   */
  getAccountPolicy(
    vaultId: string,
    itemId: string,
  ): Promise<ItemShareAccountPolicy>;

  /**
   * Validate the recipients of an item sharing link.
   */
  validateRecipients(
    policy: ItemShareAccountPolicy,
    recipients: string[],
  ): Promise<ValidRecipient[]>;

  /**
   * Create a new item sharing link.
   */
  create(
    item: Item,
    policy: ItemShareAccountPolicy,
    params: ItemShareParams,
  ): Promise<string>;
}

export class ItemsShares implements ItemsSharesApi {
  #inner: InnerClient;

  public constructor(inner: InnerClient) {
    this.#inner = inner;
  }

  /**
   * Get the item sharing policy of your account.
   */
  public async getAccountPolicy(
    vaultId: string,
    itemId: string,
  ): Promise<ItemShareAccountPolicy> {
    const invocationConfig: InvokeConfig = {
      invocation: {
        clientId: this.#inner.id,
        parameters: {
          name: "ItemsSharesGetAccountPolicy",
          parameters: {
            vault_id: vaultId,
            item_id: itemId,
          },
        },
      },
    };
    return JSON.parse(
      await this.#inner.core.invoke(invocationConfig),
      ReviverFunc,
    ) as Promise<ItemShareAccountPolicy>;
  }

  /**
   * Validate the recipients of an item sharing link.
   */
  public async validateRecipients(
    policy: ItemShareAccountPolicy,
    recipients: string[],
  ): Promise<ValidRecipient[]> {
    const invocationConfig: InvokeConfig = {
      invocation: {
        clientId: this.#inner.id,
        parameters: {
          name: "ItemsSharesValidateRecipients",
          parameters: {
            policy,
            recipients,
          },
        },
      },
    };
    return JSON.parse(
      await this.#inner.core.invoke(invocationConfig),
      ReviverFunc,
    ) as Promise<ValidRecipient[]>;
  }

  /**
   * Create a new item sharing link.
   */
  public async create(
    item: Item,
    policy: ItemShareAccountPolicy,
    params: ItemShareParams,
  ): Promise<string> {
    const invocationConfig: InvokeConfig = {
      invocation: {
        clientId: this.#inner.id,
        parameters: {
          name: "ItemsSharesCreate",
          parameters: {
            item,
            policy,
            params,
          },
        },
      },
    };
    return JSON.parse(
      await this.#inner.core.invoke(invocationConfig),
      ReviverFunc,
    ) as Promise<string>;
  }
}
